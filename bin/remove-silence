#!/usr/bin/env bash

set -e

# Function to display usage information
usage() {
    echo "Usage: $0 [-h] [-o output_dir] [-f output_file] [-m mode] [-v volume] [-t time] input_file"
    echo
    echo "Process silence in a video file using FFmpeg."
    echo
    echo "Options:"
    echo "  -h              Display this help message and exit"
    echo "  -o output_dir   Specify the output directory (default: current directory)"
    echo "  -f output_file  Specify the full output file path (overrides -o)"
    echo "  -m mode         Specify the processing mode: 'remove' or 'fastforward' (default: remove)"
    echo "  -v volume       Specify the volume threshold in dB (default: -50dB)"
    echo "  -t time         Specify the time threshold in seconds (default: 1)"
    echo "  input_file      The input video file to process"
}

# Parse command-line options
output_dir="."
output_file=""
mode="remove"
volume_threshold="-50dB"
time_threshold="1"

while getopts ":ho:f:m:v:t:" opt; do
    case ${opt} in
        h )
            usage
            exit 0
            ;;
        o )
            output_dir="$OPTARG"
            ;;
        f )
            output_file="$OPTARG"
            ;;
        m )
            mode="$OPTARG"
            ;;
        v )
            volume_threshold="$OPTARG"
            ;;
        t )
            time_threshold="$OPTARG"
            ;;
        \? )
            echo "Invalid option: -$OPTARG" 1>&2
            usage
            exit 1
            ;;
        : )
            echo "Option -$OPTARG requires an argument" 1>&2
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

# Check if input file is provided
if [ $# -eq 0 ]; then
    echo "Error: Input file is required" 1>&2
    usage
    exit 1
fi

input_file="$1"

# Check if input file exists
if [ ! -f "$input_file" ]; then
    echo "Error: Input file '$input_file' does not exist" 1>&2
    exit 1
fi

# Generate output file name if not specified
if [ -z "$output_file" ]; then
    input_filename=$(basename "$input_file")
    input_name="${input_filename%.*}"
    input_ext="${input_filename##*.}"
    output_filename="${input_name}_silence_removed.${input_ext}"
    output_file="${output_dir}/${output_filename}"
fi

# Ensure output directory exists
output_dir=$(dirname "$output_file")
mkdir -p "$output_dir"

# Process silence using FFmpeg
if [ "$mode" = "remove" ]; then
    ffmpeg -i "$input_file" -af silenceremove=stop_periods=-1:stop_duration="${time_threshold}":stop_threshold="${volume_threshold}" "$output_file"
    echo "Silence removed. Output file: $output_file"
elif [ "$mode" = "fastforward" ]; then
    ffmpeg -i "$input_file" -af silencedetect=noise="${volume_threshold}":d="${time_threshold}" -f null - 2> silence_log.txt
    silences=$(awk '/silence_end/ {print $5 " " $8}' silence_log.txt | sed 's/$/,/')
    ffmpeg -i "$input_file" -filter_complex "[0:v]setpts=PTS-STARTPTS[v];[0:a]asetpts=PTS-STARTPTS[a];[v][a]select='not(between(t,${silences%,}))'" -af "atempo=1.5" "$output_file"
    rm silence_log.txt
    echo "Silent parts fast-forwarded. Output file: $output_file"
else
    echo "Error: Invalid mode. Use 'remove' or 'fastforward'." >&2
    exit 1
fi
